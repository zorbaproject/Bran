//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ufal.UDPipe {

public class Word : Token {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Word(global::System.IntPtr cPtr, bool cMemoryOwn) : base(udpipe_csharpPINVOKE.Word_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Word obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Word() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          udpipe_csharpPINVOKE.delete_Word(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public int id {
    set {
      udpipe_csharpPINVOKE.Word_id_set(swigCPtr, value);
    } 
    get {
      int ret = udpipe_csharpPINVOKE.Word_id_get(swigCPtr);
      return ret;
    } 
  }

  public string lemma {
    set {
      udpipe_csharpPINVOKE.Word_lemma_set(swigCPtr, value);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = udpipe_csharpPINVOKE.Word_lemma_get(swigCPtr);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string upostag {
    set {
      udpipe_csharpPINVOKE.Word_upostag_set(swigCPtr, value);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = udpipe_csharpPINVOKE.Word_upostag_get(swigCPtr);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string xpostag {
    set {
      udpipe_csharpPINVOKE.Word_xpostag_set(swigCPtr, value);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = udpipe_csharpPINVOKE.Word_xpostag_get(swigCPtr);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string feats {
    set {
      udpipe_csharpPINVOKE.Word_feats_set(swigCPtr, value);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = udpipe_csharpPINVOKE.Word_feats_get(swigCPtr);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int head {
    set {
      udpipe_csharpPINVOKE.Word_head_set(swigCPtr, value);
    } 
    get {
      int ret = udpipe_csharpPINVOKE.Word_head_get(swigCPtr);
      return ret;
    } 
  }

  public string deprel {
    set {
      udpipe_csharpPINVOKE.Word_deprel_set(swigCPtr, value);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = udpipe_csharpPINVOKE.Word_deprel_get(swigCPtr);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string deps {
    set {
      udpipe_csharpPINVOKE.Word_deps_set(swigCPtr, value);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = udpipe_csharpPINVOKE.Word_deps_get(swigCPtr);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Children children {
    set {
      udpipe_csharpPINVOKE.Word_children_set(swigCPtr, Children.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Word_children_get(swigCPtr);
      Children ret = (cPtr == global::System.IntPtr.Zero) ? null : new Children(cPtr, false);
      return ret;
    } 
  }

  public Word(int id, string form) : this(udpipe_csharpPINVOKE.new_Word__SWIG_0(id, form), true) {
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public Word(int id) : this(udpipe_csharpPINVOKE.new_Word__SWIG_1(id), true) {
  }

  public Word() : this(udpipe_csharpPINVOKE.new_Word__SWIG_2(), true) {
  }

}

}
